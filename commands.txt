Branch commands:
// Create a new branch
git branch <branch_name>

// Switch to a branch
git checkout <branch_name>
// Note (Git 2.23 and later):
// git switch <branch_name>

// Create and switch to a new branch
git checkout -b <branch_name>
// Note (Git 2.23 and later):
// git switch -c <branch_name>

// List all branches
git branch

// Merge changes from a branch
git merge <source_branch>

// Delete a merged branch
git branch -d <branch_name>

// Force delete a branch (merged or unmerged)
git branch -D <branch_name>

// Rename a branch
git branch -m <new_branch_name>

// Push a new branch to a remote repository
git push -u origin <branch_name>

// Delete a remote branch
git push origin --delete <branch_name>







Remote commands:
// Add a remote repository
git remote add <remote_name> <remote_url>
// Comment: Adds a remote repository with the specified name and URL.

// List all remote repositories
git remote -v
// Comment: Lists all remote repositories along with their URLs.

// Show information about a specific remote
git remote show <remote_name>
// Comment: Displays detailed information about the specified remote repository.

// Rename a remote
git remote rename <old_name> <new_name>
// Comment: Renames a remote repository from the old name to the new name.

// Remove a remote
git remote remove <remote_name>
// Comment: Removes the specified remote repository from the list of remotes.

// Fetch changes from a remote repository
git fetch <remote_name>
// Comment: Downloads changes from the specified remote repository but does not merge them.

// Fetch changes and merge them into the current branch
git pull <remote_name> <branch_name>
// Comment: Fetches changes from the specified remote repository and merges them into the current branch.

// Push changes to a remote repository
git push <remote_name> <branch_name>
// Comment: Pushes local changes to the specified branch of the remote repository.

// Push changes, including tags, to a remote repository
git push --tags <remote_name>
// Comment: Pushes local tags along with other changes to the specified remote repository.

// Clone a repository from a remote URL
git clone <remote_url>
// Comment: Creates a copy of a remote repository on your local machine.

// Show URLs of remotes
git remote get-url <remote_name>
// Comment: Displays the URL associated with the specified remote.

// Set URL for a remote
git remote set-url <remote_name> <new_url>
// Comment: Changes the URL of the specified remote to the new URL.








Local commands:
// Initialize a new Git repository
git init
// Comment: Initializes a new Git repository in the current directory.

// Check the status of changes in your working directory
git status
// Comment: Shows the status of files in your working directory, indicating changes that need to be committed or staged.

// Add changes to the staging area
git add <file_name>
// Comment: Adds specified files or changes to the staging area to be included in the next commit.

// Add all changes to the staging area
git add .
// Comment: Adds all changes (new, modified, or deleted files) to the staging area.

// Commit changes with a message
git commit -m "Your commit message"
// Comment: Records changes in the repository with a descriptive commit message.

// View the commit history
git log
// Comment: Shows a detailed log of commits, including commit messages, authors, and timestamps.

// Show the differences between working directory and last commit
git diff
// Comment: Displays the differences between the working directory and the last commit.

// Show differences between staged changes and last commit
git diff --staged
// Comment: Displays the differences between the staged changes and the last commit.

// Undo changes in the working directory
git checkout -- <file_name>
// Comment: Discards changes in the working directory for the specified file.

// Undo changes in the staging area
git reset HEAD <file_name>
// Comment: Unstages changes for the specified file, keeping the changes in the working directory.

// Create a new branch
git branch <branch_name>
// Comment: Creates a new branch with the specified name.

// Switch to a branch
git checkout <branch_name>
// Comment: Switches to the specified branch.

// Create and switch to a new branch
git checkout -b <branch_name>
// Comment: Creates a new branch and switches to it in one command.

// Merge changes from a branch
git merge <source_branch>
// Comment: Integrates changes from the specified branch into the currently checked-out branch.

// Delete a branch
git branch -d <branch_name>
// Comment: Deletes the specified branch if it has been merged into the current branch.

// Force delete a branch (merged or unmerged)
git branch -D <branch_name>
// Comment: Forcefully deletes the specified branch, even if it contains unmerged changes.

// Rename a branch
git branch -m <new_branch_name>
// Comment: Renames the current branch to the specified new name.






View commit history:
// View basic commit history
git log
// Comment: Shows a detailed log of commits, including commit messages, authors, timestamps, and commit hashes.

// View commit history with a graph
git log --graph --oneline --all
// Comment: Displays a more compact commit history with a graph showing branch and merge history.

// View commit history for a specific branch
git log <branch_name>
// Comment: Shows the commit history for a specific branch.

// View limited commit history (last N commits)
git log -n <number_of_commits>
// Comment: Limits the commit history to the last N commits.

// View commit history with changes
git log -p
// Comment: Shows the commit history along with the changes made in each commit.

// View commit history for a specific file
git log <file_name>
// Comment: Displays the commit history for a specific file.

// View commit history for a specific author
git log --author=<author_name>
// Comment: Shows the commit history for a specific author.

// View commit history since a specific date
git log --since=<date>
// Comment: Displays the commit history since the specified date.

// View commit history in one line
git log --oneline
// Comment: Provides a concise, one-line summary of each commit.

// View commit history with decorations
git log --decorate
// Comment: Adds additional information, such as branch names and tags, to the commit history.